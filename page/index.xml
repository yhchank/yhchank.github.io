<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pages on Hank's Blog</title><link>https://yhchank.github.io/page/</link><description>Recent content in Pages on Hank's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 31 Jan 2023 10:11:02 +0800</lastBuildDate><atom:link href="https://yhchank.github.io/page/index.xml" rel="self" type="application/rss+xml"/><item><title>思路随记</title><link>https://yhchank.github.io/%E6%80%9D%E8%B7%AF%E9%9A%8F%E8%AE%B0/</link><pubDate>Tue, 31 Jan 2023 10:11:02 +0800</pubDate><guid>https://yhchank.github.io/%E6%80%9D%E8%B7%AF%E9%9A%8F%E8%AE%B0/</guid><description>&lt;ul>
&lt;li>解法分类
&lt;ul>
&lt;li>贪心&lt;/li>
&lt;li>枚举&lt;/li>
&lt;li>动规&lt;/li>
&lt;li>数学&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>“满足要求的最大值”“最大值最小” =&amp;gt; 考虑&lt;strong>二分&lt;/strong>&lt;/li>
&lt;li>“字典序最小/最大的结果” =&amp;gt; 考虑贪心（因为使当前项更小一定会使结果更优），如 &lt;a class="link" href="https://www.luogu.com.cn/problem/CF1547D" target="_blank" rel="noopener"
>CF1547D Co-growing Sequence&lt;/a>就是一道按位贪心的题目（实际解法可以直接用位运算而不是按位枚举）；&lt;strong>补充：&lt;/strong> 如果在某些涉及位运算及相关知识的题目中，可能会出现“最大值”“最小值”等问题，此时也可以考虑从高到低按位贪心（类似于字典序最小），例题：&lt;a class="link" href="https://www.luogu.com.cn/problem/CF1554C" target="_blank" rel="noopener"
>CF1554C Mikasa&lt;/a>&lt;/li>
&lt;li>对点集排序，某些点需满足特定关系 =&amp;gt; 考虑&lt;strong>拓扑排序&lt;/strong>&lt;/li>
&lt;li>遇到DP题，先从简单情况入手（有时就是DP的初始状态）。比如 &lt;a class="link" href="https://www.luogu.com.cn/problem/CF187B" target="_blank" rel="noopener"
>CF187B AlgoRace&lt;/a>，这道题就可以先考虑不换车的情况（Floyd板子），再列转移方程，推广到其他情况&lt;/li>
&lt;li>遇到判&lt;strong>正环&lt;/strong>或者求&lt;strong>最长路&lt;/strong>，将所有的边权&lt;strong>取相反数&lt;/strong>，例题：&lt;a class="link" href="https://www.luogu.com.cn/problem/P1938" target="_blank" rel="noopener"
>P1938 [USACO09NOV]Job Hunt S&lt;/a>&lt;/li>
&lt;li>没有思路先暴力，考虑去除冗余情况有时也是一种解法&lt;/li>
&lt;li>求区间$(l, r)$的个数或找所有满足要求的区间 =&amp;gt; 有时可以考虑双指针（尺取法）&lt;/li>
&lt;li>当整体问题不便于解决时，可以考虑每个“个体”对整体的贡献，例1：&lt;a class="link" href="https://www.luogu.com.cn/problem/CF547B" target="_blank" rel="noopener"
>CF547B Mike and Feet&lt;/a>，此题中则可以考虑每个值可以作为那些区间的最小值（单调栈解决）；例2：&lt;a class="link" href="https://www.luogu.com.cn/problem/P2422" target="_blank" rel="noopener"
>P2422 良好的感觉&lt;/a>，此题中则可考虑每一天为最不舒服的那一天时，区间的感受值最大为多少（区间尽量大，仍然是单调栈解决）&lt;/li>
&lt;li>若区间左端点 $\in [l, mid]$，区间右端点 $\in [mid, r]$（即 $mid$ 一定在区间中），则最大区间和等于 $\max_{i=mid}^{r}sum_i - \min_{i=l-1}^{mid-1}sum_i$，其中 $sum_i$ 表示前缀和&lt;/li>
&lt;li>对于&lt;strong>修改+查询&lt;/strong>类题目，若有两种解法，一种修改 $O(n)$、查询 $O(1)$，一种修改 $O(1)$、查询 $O(n)$，那么可以考虑利用分块进行折中；典型的分块优化方式为&lt;strong>分成两层处理&lt;/strong>：修改/查询时 $O(\sqrt{n})$ 处理整块部分（块层次），再 $O(\sqrt{n})$ 处理区间两端的零碎部分（个体层次）；例题：
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.luogu.com.cn/problem/U277750" target="_blank" rel="noopener"
>[太戈 961] 最强大脑之十二&lt;/a>，&lt;a class="link" href="https://www.luogu.com.cn/paste/z9oqwgjn" target="_blank" rel="noopener"
>代码&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.luogu.com.cn/problem/U277755" target="_blank" rel="noopener"
>[太戈 1058] 进攻长城&lt;/a>，&lt;a class="link" href="https://www.luogu.com.cn/paste/wd605oxt" target="_blank" rel="noopener"
>代码&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.luogu.com.cn/problem/U277718" target="_blank" rel="noopener"
>[太戈 1060] 提前交卷&lt;/a>，&lt;a class="link" href="https://www.luogu.com.cn/paste/4ws3mlmj" target="_blank" rel="noopener"
>代码&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>“区间 $[l, r]$ 内小于等于 $k$ 的元素的个数”
&lt;ul>
&lt;li>静态：区间排序+二分（&lt;code>lower_bound()&lt;/code> / &lt;code>upper_bound()&lt;/code>），例：&lt;a class="link" href="https://www.luogu.com.cn/problem/U277755" target="_blank" rel="noopener"
>[太戈 1058] 进攻长城&lt;/a>，&lt;a class="link" href="https://www.luogu.com.cn/paste/wd605oxt" target="_blank" rel="noopener"
>代码&lt;/a>&lt;/li>
&lt;li>动态：树状数组维护
&lt;ol>
&lt;li>当添加元素 $a[i]$ 时，&lt;code>add(a[i], 1)&lt;/code>&lt;/li>
&lt;li>对 $1$ 至 $l - 1$ 号元素 &lt;code>add(a[i], 1)&lt;/code>，此时 &lt;code>query(k)&lt;/code> 就是区间 $[1, l - 1]$ 中小于等于 $k$ 的元素个数&lt;/li>
&lt;li>继续对 $l$ 至 $r$ 号元素 &lt;code>add(a[i], 1)&lt;/code>，此时 &lt;code>query(k)&lt;/code> 就是区间 $[1, r]$ 中小于等于 $k$ 的元素个数&lt;/li>
&lt;li>两者相减&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>树上问题，求两点间的距离（&lt;code>d[i]&lt;/code>表示 $i$ 节点的深度）：&lt;code>d[u] + d[v] - 2 * d[lca(u, v)]&lt;/code>&lt;/li>
&lt;li>树上问题思考策略：
&lt;ul>
&lt;li>暴力+优化&lt;/li>
&lt;li>简化为链&lt;/li>
&lt;li>手算特殊情况&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>归档</title><link>https://yhchank.github.io/archives/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://yhchank.github.io/archives/</guid><description/></item><item><title>关于</title><link>https://yhchank.github.io/%E5%85%B3%E4%BA%8E/</link><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><guid>https://yhchank.github.io/%E5%85%B3%E4%BA%8E/</guid><description>&lt;p>一个蒟蒻&lt;/p>
&lt;p>洛谷 uid：&lt;a class="link" href="https://www.luogu.com.cn/user/244309" target="_blank" rel="noopener"
>244309&lt;/a>&lt;/p></description></item><item><title>链接</title><link>https://yhchank.github.io/%E9%93%BE%E6%8E%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yhchank.github.io/%E9%93%BE%E6%8E%A5/</guid><description/></item><item><title>搜索</title><link>https://yhchank.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yhchank.github.io/search/</guid><description/></item></channel></rss>